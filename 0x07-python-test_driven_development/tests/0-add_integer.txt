The ``add_integer`` module
==========================

Using ``add_integer``
--------------------------

importing the function from the module:
	  >>> add_integer = __import__("0-add_integer").add_integer

Check for module documentation:
      	  >>> m = __import__("0-add_integer").__doc__
	  >>> len(m) > 1
	  True

Check for function documentation:
      	  >>> f = __import__("0-add_integer").add_integer.__doc__
	  >>> len(f) > 1
	  True

Check for both argument:
      	  >>> add_integer(2, 3)
	  5

Check for a negative argument `a`:
      	  >>> add_integer(-5, 3)
	  -2

Check for a negative argument `b`:
      	  >>> add_integer(3, -5)
	  -2

Check for both negative arguments:
      	  >>> add_integer(-3, -5)
	  -8

Missing one argument `a`:
	  >>> add_integer()
	  Traceback (most recent call last):
	  ...
	  TypeError: add_integer() missing 1 required positional argument: 'a'

Check for passing single argument `a`:
      	  >>> add_integer(2)
	  100

Check for argument `b` as string:
      	  >>> add_integer(5, "a string")
	  Traceback (most recent call last):
	  ...
	  TypeError: b must be an integer

Check for arguement `a` as a string:
      	  >>> add_integer("a string", 4)
	  Traceback (most recent call last):
          ...
          TypeError: a must be an integer

Check for argument `a` as float:
      	  >>> add_integer(2.56, 3)
	  5

Check for argument `b` as float:
      	  >>> add_integer(3, 2.56)
	  5

Check for argument `a` as None:
      	  >>> add_integer(None)
	  Traceback (most recent call last):
	  ...
	  TypeError: a must be an integer

Check for argument `b` as None:
      	  >>> add_integer(2, None)
	  Traceback (most recent call last):
	  ...
	  TypeError: b must be an integer
